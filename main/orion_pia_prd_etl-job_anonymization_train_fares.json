{
  "name" : "orion_pia_prd_etl-job_anonymization_train_fares",
  "jobMode" : "VISUAL",
  "description" : "",
  "role" : "arn:aws:iam::881490119354:role/orion_pia_prd_glue-role",
  "executionProperty" : {
    "maxConcurrentRuns" : 1
  },
  "command" : {
    "name" : "glueetl",
    "scriptLocation" : "s3://orion-pia-prd-etljob/scripts/orion_pia_prd_etl-job_anonymization_train_fares.py",
    "pythonVersion" : "3"
  },
  "defaultArguments" : {
    "--enable-metrics" : "true",
    "--spark-event-logs-path" : "s3://aws-glue-assets-881490119354-ap-northeast-1/sparkHistoryLogs/",
    "--enable-job-insights" : "true",
    "--enable-observability-metrics" : "true",
    "--enable-glue-datacatalog" : "true",
    "--EXECUTE_TIMESTAMP_ISO_STR" : "2024-11-15T01:11:11.000Z",
    "--SOURCE_SYSTEM" : "ONE",
    "--job-bookmark-option" : "job-bookmark-disable",
    "--DATA_NAME" : "train_fares",
    "--job-language" : "python",
    "--TempDir" : "s3://orion-pia-prd-etljob/tmp/"
  },
  "maxRetries" : 0,
  "allocatedCapacity" : 2,
  "timeout" : 120,
  "maxCapacity" : 2.0,
  "glueVersion" : "4.0",
  "numberOfWorkers" : 2,
  "workerType" : "G.1X",
  "executionClass" : "STANDARD",
  "codeGenConfigurationNodes" : "{\"node-1728024847298\":{\"S3ParquetSource\":{\"AdditionalOptions\":{\"EnableSamplePath\":true,\"SamplePath\":\"\"},\"Exclusions\":[],\"Name\":\"【必須】連携されたデータ\",\"OutputSchemas\":[{\"Columns\":[]}],\"Paths\":[\"s3://orion-pia-prd-work/ONE/train_fares/\"]}},\"node-1731906559954\":{\"CustomCode\":{\"ClassName\":\"MyTransformOutputOneFileParquet\",\"Code\":\"import boto3\\nfrom awsglue.utils import getResolvedOptions\\nfrom datetime import datetime, timedelta, timezone\\n\\n### 作成時の修正箇所ここから ###\\n#  本ノードは作成時のパラメータ設定不要です。このままお使いください。\\n### 作成時の修正箇所ここまで ###\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileParquet) start\\\")\\n\\n# Glueジョブ引数の取得\\nglue_params = getResolvedOptions(sys.argv, [\\\"SOURCE_SYSTEM\\\", \\\"DATA_NAME\\\", \\\"EXECUTE_TIMESTAMP_ISO_STR\\\"])\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileParquet) glue_params:{glue_params}\\\")\\n\\n# 連携元システム名（DMP/ONE/OCTPASS）\\nsource_system = glue_params.get(\\\"SOURCE_SYSTEM\\\", None)\\n# データ名（物理テーブル名）\\ndata_name = glue_params.get(\\\"DATA_NAME\\\", None)\\n# 実行日時\\nexecute_timestamp_iso_str = glue_params.get(\\\"EXECUTE_TIMESTAMP_ISO_STR\\\", None)\\n\\n# プレフィックスヘッド\\nprefix_head = f\\\"{source_system}/{data_name}\\\"\\n\\n# 作業用バケット\\npia_work_bucket = \\\"orion-pia-prd-work\\\"\\n# workディレクトリ\\nwork_dir = f\\\"{prefix_head}/raw_work/\\\"\\n# 一時出力先s3パス\\nwork_s3_path = f\\\"s3://{pia_work_bucket}/{work_dir}\\\"\\n\\n# DataFrameの取得\\ndf = dfc.select(list(dfc.keys())[0]).toDF()\\n\\n# workフォルダにparquet形式で出力\\ndf.coalesce(1).write.option(\\\"compression\\\", \\\"snappy\\\").mode(\\\"overwrite\\\").parquet(work_s3_path)\\n\\n# 関数定義\\ndef convert_timestamp_iso_to_jst(iso_time_str: str, output_format: str) -> str:\\n    \\\"\\\"\\\"ISO日時文字列を指定フォーマットに変換\\n    Args:\\n        iso_time_str (str): ISO日時文字列\\n        output_format (str): 出力フォーマット\\n    Returns:\\n        str: 指定フォーマット形式文字列\\n    \\\"\\\"\\\"\\n    # UTCの日時文字列をパースしてdatetimeオブジェクトに変換\\n    utc_time = datetime.strptime(iso_time_str, \\\"%Y-%m-%dT%H:%M:%S.%fZ\\\")\\n\\n    # JSTへの変換（UTC+9時間）\\n    jst_time = utc_time.replace(tzinfo=timezone.utc).astimezone(timezone(timedelta(hours=9)))\\n\\n    # フォーマット変換\\n    jst_time_str = jst_time.strftime(output_format)\\n\\n    return jst_time_str\\n\\n# ■実行日時をJSTのyyyyymmddhhmmss文字列に変換\\nexecute_timestamp_str = convert_timestamp_iso_to_jst(iso_time_str=execute_timestamp_iso_str, output_format=\\\"%Y%m%d%H%M%S\\\")\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileParquet) execute_timestamp_str:{execute_timestamp_str}\\\")\\n\\n#  個人情報なし連携バケット\\nrelay_bucket = \\\"orion-prd-relay\\\"\\n# 連携先ディレクトリ\\nreceive_prefix = f\\\"{prefix_head}/receive\\\"\\n# 連携ファイル名\\nfile_name = f\\\"{data_name}_relay_{execute_timestamp_str}.snappy.parquet\\\"\\n# 連携先key\\nfile_key = f\\\"{receive_prefix}/{file_name}\\\"\\n\\n# S3クライアントを使用してworkフォルダに出力したファイルをリネームして移動\\ns3 = boto3.client(\\\"s3\\\")\\ns3_resource = boto3.resource(\\\"s3\\\")\\nresponse = s3.list_objects_v2(Bucket=pia_work_bucket, Prefix=work_dir)\\nfor obj in response.get(\\\"Contents\\\", []):\\n    if obj[\\\"Key\\\"].endswith(\\\".parquet\\\"):\\n        # ソース情報設定\\n        copy_source = {\\\"Bucket\\\": pia_work_bucket, \\\"Key\\\": obj[\\\"Key\\\"]}\\n        print(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformOutputOneFileParquet) copy_source:{copy_source}, relay_bucket:{relay_bucket}, file_key:{file_key}\\\")\\n        # コピーを実行\\n        s3_resource.meta.client.copy(copy_source, relay_bucket, file_key)\\n        # 削除を実行\\n        s3.delete_object(Bucket=pia_work_bucket, Key=obj[\\\"Key\\\"])\\n        break\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformOutputOneFileParquet) end\\\")\",\"Inputs\":[\"node-1728546758666\"],\"Name\":\"【Parquet必須】個人情報なし環境へ１ファイルで出力(Parquet)\"}},\"node-1728544763165\":{\"CustomCode\":{\"ClassName\":\"MyTransformAddTimestamp\",\"Code\":\"from awsglue.utils import getResolvedOptions\\nfrom datetime import datetime, timedelta, timezone\\nfrom pyspark.sql.functions import lit\\n\\n### 作成時の修正箇所ここから ###\\n#  本ノードは作成時のパラメータ設定不要です。このままお使いください。\\n### 作成時の修正箇所ここまで ###\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformAddTimestamp) start\\\")\\n\\n# Glueジョブ引数の取得\\nglue_params = getResolvedOptions(sys.argv, [\\\"EXECUTE_TIMESTAMP_ISO_STR\\\"])\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformAddTimestamp) glue_params:{glue_params}\\\")\\n\\n# 実行日時\\nexecute_timestamp_iso_str = glue_params.get(\\\"EXECUTE_TIMESTAMP_ISO_STR\\\", None)\\n\\n# 追加項目名\\nadd_column_name = \\\"orion_process_datetm\\\"\\n\\n# 関数定義\\ndef convert_timestamp_iso_to_jst(iso_time_str: str, output_format: str) -> str:\\n    \\\"\\\"\\\"ISO日時文字列を指定フォーマットに変換\\n    Args:\\n        iso_time_str (str): ISO日時文字列\\n        output_format (str): 出力フォーマット\\n    Returns:\\n        str: 指定フォーマット形式文字列\\n    \\\"\\\"\\\"\\n    # UTCの日時文字列をパースしてdatetimeオブジェクトに変換\\n    utc_time = datetime.strptime(iso_time_str, \\\"%Y-%m-%dT%H:%M:%S.%fZ\\\")\\n    # JSTへの変換（UTC+9時間）\\n    jst_time = utc_time.replace(tzinfo=timezone.utc).astimezone(timezone(timedelta(hours=9)))\\n    # フォーマット変換\\n    jst_time_str = jst_time.strftime(output_format)\\n    return jst_time_str\\n\\n# ■実行日時をJSTのyyyyy/mm/dd hh:mm:ss文字列に変換\\nexecute_timestamp_str = convert_timestamp_iso_to_jst(iso_time_str=execute_timestamp_iso_str, output_format=\\\"%Y/%m/%d %H:%M:%S\\\")\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} DEBUG (MyTransformAddTimestamp) execute_timestamp_str:{execute_timestamp_str}\\\")\\n\\n# DataFrameの取得\\ndf = dfc.select(*list(dfc.keys())).toDF()\\n\\n# JSTタイムスタンプカラムを追加\\ndf = df.withColumn(add_column_name, lit(execute_timestamp_str))\\n\\nprint(f\\\"{datetime.strftime(datetime.now(), '%Y/%m/%dT%H:%M:%S')} INFO (MyTransformAddTimestamp) end\\\")\\n# DynamicFrameに変換して返す\\noutput_dyf = DynamicFrame.fromDF(df, glueContext, \\\"output\\\")\\nreturn DynamicFrameCollection({\\\"CustomTransform0\\\": output_dyf}, glueContext)\",\"Inputs\":[\"node-1728024847298\"],\"Name\":\"【必須】データ統合基盤処理日時付加\",\"OutputSchemas\":[{\"Columns\":[{\"Name\":\"work_dt\",\"Type\":\"string\"},{\"Name\":\"odakyu_cust_num\",\"Type\":\"string\"},{\"Name\":\"agt_num\",\"Type\":\"string\"},{\"Name\":\"agt_idtfer_num\",\"Type\":\"string\"},{\"Name\":\"rpstve_cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"cmpy_cd\",\"Type\":\"string\"},{\"Name\":\"office_cd\",\"Type\":\"string\"},{\"Name\":\"store_cd\",\"Type\":\"string\"},{\"Name\":\"trnl_num\",\"Type\":\"string\"},{\"Name\":\"trd_num\",\"Type\":\"string\"},{\"Name\":\"trd_knd\",\"Type\":\"string\"},{\"Name\":\"grt_div\",\"Type\":\"string\"},{\"Name\":\"trd_total_amtmny\",\"Type\":\"string\"},{\"Name\":\"point_sub_amtmny\",\"Type\":\"string\"},{\"Name\":\"trd_grt_point\",\"Type\":\"string\"},{\"Name\":\"trd_gvbk_point\",\"Type\":\"string\"},{\"Name\":\"trnl_dt\",\"Type\":\"string\"},{\"Name\":\"trnl_tm\",\"Type\":\"string\"},{\"Name\":\"dwh_reg_datetm\",\"Type\":\"timestamp\"},{\"Name\":\"orion_process_datetm\",\"Type\":\"string\"}]}]}},\"node-1728546758666\":{\"SelectFromCollection\":{\"Index\":0,\"Inputs\":[\"node-1728544763165\"],\"Name\":\"【必須】加工後処理(データ統合基盤処理日時付加)\"}}}",
  "sourceControlDetails" : {
    "provider" : "GITHUB",
    "repository" : "ORioN_PIA",
    "branch" : "master",
    "folder" : "main"
  }
}